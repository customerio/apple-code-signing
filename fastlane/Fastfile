require 'tempfile'
require "base64"
require 'json'
require 'fileutils'
require 'securerandom'

# Constants used throughout file to configure our iOS apps 
sync_code_signing_storage_mode = "google_cloud"
sync_code_signing_google_cloud_bucket_name = "remote-habits-ios-signing"
google_cloud_keys_file_path = "" # value gets updated when file gets executed
apple_team_id = "2YC97BQN3N"
# 

before_all do |lane, options|    
  if ENV['CI'] # block to run if this Fastfile gets executed from a CI server 
    setup_ci # required for getting code signing to work. creates a temporary keychain file on server 
  end 
end

# Code signing certificates expire once a year. When they expire, you must re-create a new certificates and then re-create 
# all provisioning profiles because the profiles used the old certificate. 
# This function will delete all certificates used by all of our iOS apps. Only run this function when the cerficates are about 
# to expire, or maybe you decide to run this function because you encountered a problem with the apple developer account 
# and you decided to start over on code signing. 
lane :delete_all_code_signing_files do |values|  
  # We need to delete code signing from google cloud bucket and from apple developer account. 
  # Authenticate to both services. 
  setup_apple_account_write_access
  setup_google_bucket_write_access

  # match_nuke is fastlane method of deleting files for code signing. 
  # Nuke deletes code signing files for *all* apps in the apple developer account. 
  match_nuke(
    type: 'development',
    readonly: false,
    team_id: apple_team_id,
    storage_mode: sync_code_signing_storage_mode,
    google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
    google_cloud_keys_file: google_cloud_keys_file_path
  )
  match_nuke(
    type: 'adhoc',
    readonly: false,
    team_id: apple_team_id,
    storage_mode: sync_code_signing_storage_mode,
    google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
    google_cloud_keys_file: google_cloud_keys_file_path
  )
end

# Assumes your project already has an Appfile defining all app identifiers to create code signing files for. 
# Meant to be called by a iOS app project. 
lane :create_code_signing_files_for_app do |values|
  # We need to create code signing files in apple developer account and google cloud bucket. 
  # authenticate with both services. 
  setup_apple_account_write_access
  setup_google_bucket_write_access

  # Fetch all bundle identifiers. Remove (via select() function), the Wildcard app if there is one. 
  # Wildcard app (bundle identier = *), we currently do not use and may cause issues creating adhoc code signing files for it. 
  bundle_identifiers_to_create_files_for = Spaceship::ConnectAPI::BundleId.all.select{ |app| app.identifier != "*"}

  UI.important("Received #{bundle_identifiers_to_create_files_for.count} apps from Apple developer account. Now, we will go through each app and confirm code signing files have been created.")

  bundle_identifiers_to_create_files_for.each { |bundle_id| 
    app_identifier = bundle_id.identifier

    UI.message("Running for #{app_identifier}...")

    match(
      type: 'development',
      app_identifier: app_identifier,
      readonly: false,
      team_id: apple_team_id,      
      storage_mode: sync_code_signing_storage_mode,
      google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
      google_cloud_keys_file: google_cloud_keys_file_path
    )

    UI.success("Development code signing files for #{app_identifier} created.")

    match(
      type: 'adhoc',      
      app_identifier: app_identifier,
      readonly: false,
      team_id: apple_team_id,
      storage_mode: sync_code_signing_storage_mode,
      google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
      google_cloud_keys_file: google_cloud_keys_file_path
    )

    UI.success("Adhoc (used for installing on all devices registered to Apple account) code signing files for #{app_identifier} created.")
  }
end 

lane :download_development_code_signing do |values|
  if ENV["CI"] 
    UI.user_error!("This lane is meant to only be used for setting up the development environment of an engineer, not setup the CI server credentials")
  end 

  UI.message("Checking if you're logged into your @customer.io google account on your computer....")
  is_developer_logged_into_google_account = system("gcloud auth application-default print-access-token")    
  if !is_developer_logged_into_google_account 
    error_message = 'In order to download the code signing files, you need to be logged into your @customer.io Google account on your computer. \n'\
                    'Follow the steps for development code signing setup in the README docs: https://github.com/customerio/apple-code-signing'

    UI.user_error!(error_message)
  end 
  
  sync_code_signing(
    type: "development",
    readonly: true,
    skip_google_cloud_account_confirmation: true,
    team_id: apple_team_id,
    storage_mode: sync_code_signing_storage_mode,
    google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
    google_cloud_project_id: "remote-habits"
  )
  sync_code_signing(
    type: "adhoc",
    readonly: true,
    skip_google_cloud_account_confirmation: true,
    team_id: apple_team_id,
    storage_mode: sync_code_signing_storage_mode,
    google_cloud_bucket_name: sync_code_signing_google_cloud_bucket_name,
    google_cloud_project_id: "remote-habits"
  )
end 

lane :setup_apple_account_write_access do 
  # authenticate with Apple developer account via App Store Connect API 
  # function allows passing in a base64 encoded string. Makes setup easier as you just need to set an (secret) environment variable to authenticate. 
  environment_variable_key = "APP_STORE_CONNECT_API_KEY_CONTENT_B64"

  base64encoded_app_store_connect_json_file = ENV[environment_variable_key]
  if base64encoded_app_store_connect_json_file.nil?
    UI.user_error!("Script needs to authenticate with the Apple API, but the environment variable #{environment_variable_key} has not been set.")
  end 

  app_store_connect_api_key_json = JSON.parse(Base64.decode64(base64encoded_app_store_connect_json_file))

  # Running this, all other fastlane actions are now authenticated with the API and works. 
  app_store_connect_api_key(
    key_id: app_store_connect_api_key_json["key_id"],
    issuer_id: app_store_connect_api_key_json["issuer_id"],
    key_content: app_store_connect_api_key_json["key"],
    is_key_content_base64: false
  )

  # Spaceship allows us to call the app store connect API in an easy way. We authenticate it so we can use it elsewhere in our file. 
  apple_app_store_account_api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  token = Spaceship::ConnectAPI::Token.create(apple_app_store_account_api_key)  
  Spaceship::ConnectAPI.token = token
end 

lane :setup_google_bucket_write_access do
  # Authenticate with Google Cloud account to have read/write access to file storage bucket where code signing files exist
  # Create a temporary file on the file system with contents of base64 decoded string. Makes setup easier as you just need to set an (secret) environment variable to authenticate. 
  environment_variable_key = "GOOGLE_CLOUD_AUTH_FILE_CONTENTS_B64"

  base64encoded_gc_keys_file = ENV[environment_variable_key]
  if base64encoded_gc_keys_file.nil?
    UI.user_error!("Script needs to authenticate with the Google API, but the environment variable #{environment_variable_key} has not been set.")
  end   

  random_string = SecureRandom.hex
  random_directory_save_gckeys_file = "/tmp/#{random_string}/"
  gc_keys_file_location = "#{random_directory_save_gckeys_file}gc_keys.json"

  FileUtils.mkdir_p(random_directory_save_gckeys_file)
  File.open(gc_keys_file_location, 'w') { |file| file.write(Base64.decode64(base64encoded_gc_keys_file)) }  

  google_cloud_keys_file_path = gc_keys_file_location
end 